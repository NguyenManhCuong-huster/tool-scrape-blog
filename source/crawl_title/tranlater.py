from selenium import webdriver

from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
import urllib.parse
import time
import selenium_driver

def translate_once(driver, text: str, src_lang: str = 'auto', dest_lang: str = 'vi', timeout=10) -> str:
    """
    D·ªãch vƒÉn b·∫£n b·∫±ng c√°ch ƒëi·ªÅu khi·ªÉn Google Translate b·∫±ng Selenium.

    Parameters:
        text (str): Chu·ªói c·∫ßn d·ªãch.
        src_lang (str): M√£ ng√¥n ng·ªØ ngu·ªìn (vd: 'en', 'vi')
        dest_lang (str): M√£ ng√¥n ng·ªØ ƒë√≠ch (vd: 'vi', 'en')

    Returns:
        str: K·∫øt qu·∫£ d·ªãch.
    """
    try:
        time.sleep(2)
        # M√£ h√≥a vƒÉn b·∫£n trong URL
        encoded_text = urllib.parse.quote(text)
        url = f"https://translate.google.com/?sl={src_lang}&tl={dest_lang}&text={encoded_text}&op=translate"
        driver.get(url)

        # Ch·ªù k·∫øt qu·∫£ d·ªãch xu·∫•t hi·ªán
        time.sleep(8)

        # Ch·ªù c√≥ √≠t nh·∫•t 1 ph·∫ßn t·ª≠ xu·∫•t hi·ªán
        wait = WebDriverWait(driver, timeout)
        wait.until(EC.presence_of_element_located((By.CSS_SELECTOR, 'span[jsname="W297wb"]')))

        # L·∫•y t·∫•t c·∫£ c√°c ph·∫ßn t·ª≠ k·∫øt qu·∫£
        elements = driver.find_elements(By.CSS_SELECTOR, 'span[jsname="W297wb"]')
        translated_text = " ".join([el.text for el in elements if el.text.strip()])

        return translated_text.strip()
    except Exception as e:
        return f"[L·ªói]: {e}"

import pandas as pd
import time
import os
from googletrans import Translator

def translate_with_googletrans(text: str) -> str:
    translator = Translator()
    try:
        result = translator.translate(text, src='vi', dest='en')
        return result.text
    except Exception as e:
        print("L·ªói khi d·ªãch:", e)
        return ""

def translate_title_database(input_path, output_path, start, end, batch_size=20, save_every=10, delay=5.0):
    """
    D·ªãch c√°c title trong kho·∫£ng [start, end], m·ªói batch c√≥ batch_size title.
    Sau m·ªói save_every batch -> n·ªëi (append) v√†o file output_path.
    """
    df = pd.read_excel(input_path)
    subset = df.iloc[start:end+1]

    titles = subset["title"].astype(str).tolist()
    ids = subset["_id"].tolist()
    links = subset["link"].tolist()

    results_buffer = []
    batch_counter = 0

    for i in range(0, len(titles), batch_size):
        batch_titles = titles[i:i+batch_size]
        batch_ids = ids[i:i+batch_size]
        batch_links = links[i:i+batch_size]

        # Gh√©p text
        text_to_translate = " \n ".join(batch_titles)
        #print(text_to_translate + "\n")
        # G·ªçi h√†m d·ªãch

        #translated_text = translate_once(driver, text_to_translate, src_lang="vi", dest_lang="en")
        translated_text = translate_with_googletrans(text_to_translate)
        #print(translated_text)
        # T√°ch k·∫øt qu·∫£
        translated_list = translated_text.split("\n")
        #translated_list = [t.strip(" #") for t in translated_list]
        if len(translated_list) != len(batch_titles):
            print(f"[C·∫£nh b√°o] Batch {i//batch_size}: s·ªë c√¢u d·ªãch kh√¥ng kh·ªõp!")

        # L∆∞u v√†o buffer
        for idx in range(len(batch_titles)):
            results_buffer.append({
                "_id": batch_ids[idx],
                "link": batch_links[idx],
                "title_vie": batch_titles[idx],
                "title_eng": translated_list[idx] if idx < len(translated_list) else ""
            })

        batch_counter += 1
        print(f"‚úî ƒê√£ d·ªãch batch {batch_counter}, t·ªïng {len(results_buffer)} d√≤ng")

        # N·∫øu ƒë·ªß s·ªë batch, th√¨ append ra file
        if batch_counter % save_every == 0:
            _append_to_excel(output_path, results_buffer)
            print(f"üíæ ƒê√£ l∆∞u {len(results_buffer)} d√≤ng v√†o {output_path}")
            results_buffer = []  # reset buffer

        time.sleep(delay)

    # L∆∞u ph·∫ßn c√≤n l·∫°i n·∫øu ch∆∞a ƒë·ªß save_every batch
    if results_buffer:
        _append_to_excel(output_path, results_buffer)
        print(f"üíæ ƒê√£ l∆∞u ph·∫ßn cu·ªëi: {len(results_buffer)} d√≤ng v√†o {output_path}")

def translate_test_dataset(input_path, output_path, start, end, batch_size=20, save_every=10, delay=5.0):
    """
    D·ªãch c√°c title trong kho·∫£ng [start, end], m·ªói batch c√≥ batch_size title.
    Sau m·ªói save_every batch -> n·ªëi (append) v√†o file output_path.
    """
    df = pd.read_excel(input_path)
    subset = df.iloc[start:end+1]

    titles = subset["title"].astype(str).tolist()
    values = subset["value"].tolist()
    links = subset["link"].tolist()

    results_buffer = []
    batch_counter = 0

    for i in range(0, len(titles), batch_size):
        batch_titles = titles[i:i+batch_size]
        batch_values = values[i:i+batch_size]
        batch_links = links[i:i+batch_size]

        # Gh√©p text
        text_to_translate = " \n ".join(batch_titles)
        #print(text_to_translate + "\n")
        # G·ªçi h√†m d·ªãch

        #translated_text = translate_once(driver, text_to_translate, src_lang="vi", dest_lang="en")
        translated_text = translate_with_googletrans(text_to_translate)
        #print(translated_text)
        # T√°ch k·∫øt qu·∫£
        translated_list = translated_text.split("\n")
        #translated_list = [t.strip(" #") for t in translated_list]
        if len(translated_list) != len(batch_titles):
            print(f"[C·∫£nh b√°o] Batch {i//batch_size}: s·ªë c√¢u d·ªãch kh√¥ng kh·ªõp!")

        # L∆∞u v√†o buffer
        for idx in range(len(batch_titles)):
            results_buffer.append({
                "value": batch_values[idx],
                "link": batch_links[idx],
                "title_vie": batch_titles[idx],
                "title_eng": translated_list[idx] if idx < len(translated_list) else ""
            })

        batch_counter += 1
        print(f"‚úî ƒê√£ d·ªãch batch {batch_counter}, t·ªïng {len(results_buffer)} d√≤ng")

        # N·∫øu ƒë·ªß s·ªë batch, th√¨ append ra file
        if batch_counter % save_every == 0:
            _append_to_excel(output_path, results_buffer)
            print(f"üíæ ƒê√£ l∆∞u {len(results_buffer)} d√≤ng v√†o {output_path}")
            results_buffer = []  # reset buffer

        time.sleep(delay)

    # L∆∞u ph·∫ßn c√≤n l·∫°i n·∫øu ch∆∞a ƒë·ªß save_every batch
    if results_buffer:
        _append_to_excel(output_path, results_buffer)
        print(f"üíæ ƒê√£ l∆∞u ph·∫ßn cu·ªëi: {len(results_buffer)} d√≤ng v√†o {output_path}")


def _append_to_excel(file_path, data_list):
    new_df = pd.DataFrame(data_list)
    if os.path.exists(file_path):
        old_df = pd.read_excel(file_path)
        combined = pd.concat([old_df, new_df], ignore_index=True)
    else:
        combined = new_df
    combined.to_excel(file_path, index=False)

if __name__ == "__main__":
    from selenium import webdriver

    #driver = webdriver.Chrome()
    #driver.get("https://translate.google.com")
    '''
    translate_title_database(
        input_path="blog_list.xlsx",
        output_path="translated6.xlsx",
        #driver=driver,
        start=0,
        end=5622,       
        batch_size=40, # m·ªói batch 10 title
        save_every=10, # c·ª© 10 batch th√¨ l∆∞u n·ªëi v√†o file
        delay=10        # delay 5s gi·ªØa m·ªói batch
    )
    '''

    translate_test_dataset(
        input_path="train/test_dataset.xlsx",
        output_path="train/tranlated_test_dataset.xlsx",
        #driver=driver,
        start=0,
        end=973,       
        batch_size=30, # m·ªói batch 10 title
        save_every=10, # c·ª© 10 batch th√¨ l∆∞u n·ªëi v√†o file
        delay=10        # delay 5s gi·ªØa m·ªói batch
    )

    #driver.quit()
    
    #input_text = '''C√°ch vi·∫øt ƒë√∫ng gi·∫•y ·ªßy quy·ªÅn l·∫•y s·ªï b·∫£o hi·ªÉm x√£ h·ªôi # Food stylist l√† g√¨? Kh√°m ph√° ngh·ªÅ l√†m ƒë·∫πp cho ·∫©m th·ª±c # SHL test l√† g√¨? M·∫πo v∆∞·ª£t qua SHL test hi·ªáu qu·∫£ nh·∫•t # So s√°nh tr·ª£ c·∫•p th√¥i vi·ªác v√† tr·ª£ c·∫•p th·∫•t nghi·ªáp # B√≠ quy·∫øt t√¨m vi·ªác hi·ªáu qu·∫£ cho ng∆∞·ªùi t√¨m vi·ªác l√†m tu·ªïi 50 # N√™n ngh·ªâ vi·ªác tr∆∞·ªõc T·∫øt hay sau T·∫øt? T√¨m l·ª±a ch·ªçn t·ªët nh·∫•t # C·∫≠p nh·∫≠t th√¥ng tin chi ti·∫øt v·ªÅ m·ª©c l∆∞∆°ng ng√†nh d∆∞·ª£c # Email blast l√† g√¨? C√°ch tri·ªÉn khai email blast hi·ªáu qu·∫£ # T·ªïng h·ª£p c√°c c√°ch chuy·ªÉn CAD sang Word nhanh, hi·ªáu qu·∫£ # T√¨m hi·ªÉu event concept l√† g√¨? C√°ch t·ªï ch·ª©c concept s·ª± ki·ªán # Lead Scoring l√† g√¨? C√°ch tri·ªÉn khai lead scoring hi·ªáu qu·∫£ # C√¢u h·ªèi ph·ªèng v·∫•n nh√¢n vi√™n nh√† h√†ng d·ªÖ d∆∞·ª£c h·ªèi # Tr·∫£ l·ªùi c√¢u h·ªèi ph·ªèng v·∫•n qu·∫£n l√Ω d·ª± √°n t·∫°o ·∫•n t∆∞·ª£ng ƒë·ªôt ph√° # Chi ti·∫øt v·ªÅ ch∆∞∆°ng tr√¨nh du h·ªçc ngh·ªÅ ƒëi·ªÅu d∆∞·ª°ng t·∫°i ƒê·ª©c # Kinh Nghi·ªám Ph·ªèng V·∫•n V·ªã Tr√≠ IT Cho Sinh Vi√™n M·ªõi Ra Tr∆∞·ªùng # Top nh·ªØng c√¥ng vi·ªác part time bu·ªïi s√°ng ph√π h·ª£p n√™n l√†m # B√≠ Quy·∫øt T√¨m Vi·ªác L√†m Th√™m ·ªû Gi·∫£ng V√µ H√† N·ªôi D·ªÖ D√†ng Ch·ªâ V·ªõi M·ªôt Click # B√≠ k√≠p s·ªü h·ªØu vi·ªác l√†m t·∫°i ƒê√† N·∫µng facebook uy t√≠n nh·∫•t # T√¨m Vi·ªác L√†m N·∫•u ƒÇn T·∫°i ƒê√† N·∫µng D·ªÖ D√†ng - B√≠ Quy·∫øt T√¨m Vi·ªác T·ªët Nh·∫•t # M·ªü r·ªông c∆° h·ªôi vi·ªác l√†m b√°n h√†ng Bi√™n H√≤a c√πng Timviec365
    #            '''
    #translated_text = translate_with_googletrans(input_text)
    #print("D·ªãch sang ti·∫øng Anh:", translated_text)
    
